using System;

using ObjCRuntime;
using Foundation;
using UIKit;
using CoreGraphics;
using CoreAnimation;

namespace Microsoft.OfficeUIFabric {
	interface IMSAccessibleViewDelegate { }

	// @protocol AccessibleViewDelegate
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSAccessibleViewDelegate)]
	interface MSAccessibleViewDelegate {
		// @optional -(NSString * _Nullable)accessibilityValueForAccessibleView:(UIView * _Nonnull)accessibleView __attribute__((warn_unused_result));
		[return: NullAllowed]
		[Export ("accessibilityValueForAccessibleView:")]
		string GetAccessibilityValue (UIView accessibleView);

		// @optional -(NSString * _Nullable)accessibilityLabelForAccessibleView:(UIView * _Nonnull)accessibleView __attribute__((warn_unused_result));
		[return: NullAllowed]
		[Export ("accessibilityLabelForAccessibleView:")]
		string GetAccessibilityLabel (UIView accessibleView);

		// @optional -(BOOL)accessibilityActivateForAccessibleView:(UIView * _Nonnull)accessibleView __attribute__((warn_unused_result));
		[Export ("accessibilityActivateForAccessibleView:")]
		bool GetAccessibilityActivate (UIView accessibleView);

		// @optional -(void)accessibilityIncrementForAccessibleView:(UIView * _Nonnull)accessibleView;
		[Export ("accessibilityIncrementForAccessibleView:")]
		void AccessibilityIncrement (UIView accessibleView);

		// @optional -(void)accessibilityDecrementForAccessibleView:(UIView * _Nonnull)accessibleView;
		[Export ("accessibilityDecrementForAccessibleView:")]
		void AccessibilityDecrement (UIView accessibleView);

		// @optional -(BOOL)accessibilityPerformMagicTapForAccessibleView:(UIView * _Nonnull)accessibleView __attribute__((warn_unused_result));
		[Export ("accessibilityPerformMagicTapForAccessibleView:")]
		bool GetAccessibilityPerformMagicTap (UIView accessibleView);

		// @optional -(NSArray * _Nullable)accessibilityElementsForAccessibleView:(UIView * _Nonnull)accessibleView __attribute__((warn_unused_result));
		[return: NullAllowed]
		[Export ("accessibilityElementsForAccessibleView:")]
		NSObject [] GetAccessibilityElements (UIView accessibleView);
	}

	// @protocol AccessibleTableViewDelegate <AccessibleViewDelegate>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSAccessibleTableViewDelegate)]
	interface MSAccessibleTableViewDelegate : MSAccessibleViewDelegate {
		// @optional -(NSString * _Nullable)accessibilityValueForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath forTableView:(UITableView * _Nonnull)forTableView __attribute__((warn_unused_result));
		[return: NullAllowed]
		[Export ("accessibilityValueForRowAtIndexPath:forTableView:")]
		string GetAccessibilityValueForRow (NSIndexPath indexPath, UITableView forTableView);
	}

	[BaseType (typeof (UITableViewCell), Name = ApiDefConstants.MSActionsCell)]
	interface MSActionsCell {

		[Export ("action1Button", ArgumentSemantic.Strong)]
		UIButton Action1Button { get; }

		[Export ("action2Button", ArgumentSemantic.Strong)]
		UIButton Action2Button { get; }

		[DesignatedInitializer]
		[Export ("initWithStyle:reuseIdentifier:")]
		IntPtr Constructor (UITableViewCellStyle style, string reuseIdentifier);

		[Export ("setupWithAction1Title:action2Title:action1IsDestructive:action2IsDestructive:")]
		void Setup (string action1Title, [NullAllowed] string action2Title, bool action1IsDestructive, bool action2IsDestructive);
	}

	[BaseType (typeof (UITableViewCell), Name = ApiDefConstants.MSActivityIndicatorCell)]
	interface MSActivityIndicatorCell {

		[DesignatedInitializer]
		[Export ("initWithStyle:reuseIdentifier:")]
		IntPtr Constructor (UITableViewCellStyle style, [NullAllowed] string reuseIdentifier);
	}

	[BaseType (typeof (UIView), Name = ApiDefConstants.MSActivityIndicatorView)]
	interface MSActivityIndicatorView {

		[Export ("isAnimating")]
		bool IsAnimating { get; }

		[Export ("initWithSize:")]
		IntPtr Constructor (MSActivityIndicatorViewSize size);

		[DesignatedInitializer]
		[Export ("initWithSideSize:strokeThickness:")]
		IntPtr Constructor (nfloat sideSize, nfloat strokeThickness);

		[Export ("startAnimating")]
		void StartAnimating ();
	}

	[BaseType (typeof (UIView), Name = ApiDefConstants.MSAvatarView)]
	interface MSAvatarView {

		[Export ("avatarSize", ArgumentSemantic.Assign)]
		MSAvatarSize AvatarSize { get; set; }

		[Export ("avatarBackgroundColor", ArgumentSemantic.Strong)]
		UIColor AvatarBackgroundColor { get; set; }

		[Export ("style", ArgumentSemantic.Assign)]
		MSAvatarStyle Style { get; set; }

		[DesignatedInitializer]
		[Export ("initWithAvatarSize:withBorder:style:")]
		IntPtr Constructor (MSAvatarSize avatarSize, bool hasBorder, MSAvatarStyle style);

		[Export ("setupWithPrimaryText:secondaryText:image:")]
		void Setup ([NullAllowed] string primaryText, [NullAllowed] string secondaryText, [NullAllowed] UIImage image);

		[Export ("setupWithImage:")]
		void Setup (UIImage image);
	}

	[BaseType (typeof (UIView), Name = ApiDefConstants.MSBadgeField)]
	interface MSBadgeField : MSBadgeViewDelegate, IUITextFieldDelegate {

		[Export ("numberOfLines")]
		nint NumberOfLines { get; set; }

		[Export ("isEditable")]
		bool IsEditable { get; set; }

		[Export ("isEnabled")]
		bool IsEnabled { get; set; }

		[Export ("badges", ArgumentSemantic.Copy)]
		MSBadgeView [] Badges { get; }

		[Export ("badgeDataSources", ArgumentSemantic.Copy)]
		MSBadgeViewDataSource [] BadgeDataSources { get; }

		[NullAllowed]
		[Wrap ("WeakDelegate")]
		IMSBadgeFieldDelegate Delegate { get; set; }

		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[Export ("badgeText")]
		void BadgeText ();

		[Export ("addBadgesWithDataSources:")]
		void AddBadges (MSBadgeViewDataSource [] dataSources);

		[Export ("addBadgeWithDataSource:fromUserAction:updateConstrainedBadges:")]
		void AddBadge (MSBadgeViewDataSource dataSource, bool fromUserAction, bool updateConstrainedBadges);

		[Export ("deleteBadgesWithDataSource:")]
		void DeleteBadges (MSBadgeViewDataSource dataSource);

		[Export ("selectBadge:")]
		void SelectBadge (MSBadgeView badge);

		[Export ("textFieldContent")]
		string TextFieldContent { get; }

		[Export ("resetTextFieldContent")]
		void ResetTextFieldContent ();

		[Export ("accessibilityElementCount")]
		nint AccessibilityElementCount { get; }

		[return: NullAllowed]
		[Export ("accessibilityElementAtIndex:")]
		NSObject GetAccessibilityElement (nint index);

		[Export ("indexOfAccessibilityElement:")]
		nint GetIndexOfAccessibilityElement (NSObject element);

		[Export ("voiceOverFocusOnTextFieldAndAnnounce:")]
		void VoiceOverFocusOnTextField ([NullAllowed] string announcement);
	}

	interface IMSBadgeViewDelegate { }

	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSBadgeViewDelegate)]
	interface MSBadgeViewDelegate {

		[Abstract]
		[Export ("didSelectBadge:")]
		void DidSelectBadge (MSBadgeView badge);

		[Abstract]
		[Export ("didTapSelectedBadge:")]
		void DidTapSelectedBadge (MSBadgeView badge);
	}

	interface IMSBadgeFieldDelegate { }

	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSBadgeFieldDelegate)]
	interface MSBadgeFieldDelegate {

		[Abstract]
		[Export ("badgeField:badgeDataSourceForText:")]
		MSBadgeViewDataSource GetBadgeDataSource (MSBadgeField badgeField, string forText);

		[Export ("badgeField:willChangeTextFieldContentWithText:")]
		void WillChangeTextFieldContent (MSBadgeField badgeField, string newText);

		[Export ("badgeFieldDidChangeTextFieldContent:isPaste:")]
		void DidChangeTextFieldContent (MSBadgeField badgeField, bool isPaste);

		[Export ("badgeField:shouldBadgeText:forSoftBadgingString:")]
		bool ShouldBadgeText (MSBadgeField badgeField, string text, string badgingString);

		[Export ("badgeField:didAddBadge:")]
		void DidAddBadge (MSBadgeField badgeField, MSBadgeView badge);

		[Export ("badgeField:didDeleteBadge:")]
		void DidDeleteBadge (MSBadgeField badgeField, MSBadgeView badge);

		[Export ("badgeField:shouldAddBadgeForBadgeDataSource:")]
		bool ShouldAddBadge (MSBadgeField badgeField, MSBadgeViewDataSource badgeDataSource);

		[Export ("badgeField:newBadgeForBadgeDataSource:")]
		MSBadgeView GetNewBadge (MSBadgeField badgeField, MSBadgeViewDataSource badgeDataSource);

		[Export ("badgeField:newMoreBadgeForBadgeDataSources:")]
		MSBadgeView GetNewMoreBadge (MSBadgeField badgeField, MSBadgeViewDataSource [] badgeDataSources);

		[Export ("badgeFieldContentHeightDidChange:")]
		void ContentHeightDidChange (MSBadgeField badgeField);

		[Export ("badgeField:didTapSelectedBadge:")]
		void DidTapSelectedBadge (MSBadgeField badgeField, MSBadgeView badge);

		[Export ("badgeField:shouldDragBadge:")]
		bool ShouldDragBadge (MSBadgeField badgeField, MSBadgeView badge);

		[Export ("badgeField:didEndDraggingOriginBadge:toBadgeField:withNewBadge:")]
		void DidEndDraggingOriginBadge (MSBadgeField originbadgeField, MSBadgeView originBadge, [NullAllowed] MSBadgeField destinationBadgeField, [NullAllowed] MSBadgeView newBadge);

		[Export ("badgeFieldShouldBeginEditing:")]
		bool ShouldBeginEditing (MSBadgeField badgeField);

		[Export ("badgeFieldDidBeginEditing:")]
		void DidBeginEditing (MSBadgeField badgeField);

		[Export ("badgeFieldDidEndEditing:")]
		void DidEndEditing (MSBadgeField badgeField);

		[Export ("badgeFieldShouldReturn:")]
		bool ShouldReturn (MSBadgeField badgeField);
	}

	[BaseType (typeof (UIView), Name = ApiDefConstants.MSBadgeView)]
	interface MSBadgeView {

		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);

		[NullAllowed]
		[Export ("dataSource", ArgumentSemantic.Strong)]
		MSBadgeViewDataSource DataSource { get; set; }

		[NullAllowed]
		[Wrap ("WeakDelegate")]
		IMSBadgeViewDelegate Delegate { get; set; }

		// @property (nonatomic, weak) id<MSBadgeViewDelegate> _Nullable delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		// @property (nonatomic) BOOL isEnabled;
		[Export ("isEnabled")]
		bool IsEnabled { get; set; }

		// @property (nonatomic) BOOL isSelected;
		[Export ("isSelected")]
		bool IsSelected { get; set; }

		// @property (nonatomic) CGFloat minWidth;
		[Export ("minWidth")]
		nfloat MinWidth { get; set; }
	}

	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSBadgeViewDataSource)]
	interface MSBadgeViewDataSource {
		// @property (copy, nonatomic) NSString * _Nonnull text;
		[Export ("text")]
		string Text { get; set; }

		// @property (nonatomic) enum MSBadgeViewStyle style;
		[Export ("style", ArgumentSemantic.Assign)]
		MSBadgeViewStyle Style { get; set; }

		// @property (nonatomic) enum MSBadgeViewSize size;
		[Export ("size", ArgumentSemantic.Assign)]
		MSBadgeViewSize Size { get; set; }

		// -(instancetype _Nonnull)initWithText:(NSString * _Nonnull)text style:(enum MSBadgeViewStyle)style size:(enum MSBadgeViewSize)size __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithText:style:size:")]
		IntPtr Constructor (string text, MSBadgeViewStyle style, MSBadgeViewSize size);
	}

	// @interface MSBlurringView : UIView
	[BaseType (typeof (UIView), Name = ApiDefConstants.MSBlurringView)]
	interface MSBlurringView {
		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);
	}

	[BaseType (typeof (UITableViewCell), Name = ApiDefConstants.MSTableViewCell)]
	interface MSTableViewCell {

		[Static]
		[Export ("smallHeight")]
		nfloat SmallHeight { get; }

		[Static]
		[Export ("mediumHeight")]
		nfloat MediumHeight { get; }

		[Static]
		[Export ("largeHeight")]
		nfloat LargeHeight { get; }

		[Static]
		[Export ("identifier")]
		string Identifier { get; }

		// +(CGFloat)heightWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle footer:(NSString * _Nonnull)footer customViewSize:(enum MSTableViewCellCustomViewSize)customViewSize customAccessoryView:(UIView * _Nullable)customAccessoryView accessoryType:(enum MSTableViewCellAccessoryType)accessoryType titleNumberOfLines:(NSInteger)titleNumberOfLines subtitleNumberOfLines:(NSInteger)subtitleNumberOfLines footerNumberOfLines:(NSInteger)footerNumberOfLines containerWidth:(CGFloat)containerWidth isInSelectionMode:(BOOL)isInSelectionMode __attribute__((warn_unused_result));
		[Static]
		[Export ("heightWithTitle:subtitle:footer:customViewSize:customAccessoryView:accessoryType:titleNumberOfLines:subtitleNumberOfLines:footerNumberOfLines:containerWidth:isInSelectionMode:")]
		nfloat GetHeight (string title, string subtitle, string footer, MSTableViewCellCustomViewSize customViewSize, [NullAllowed] UIView customAccessoryView, MSTableViewCellAccessoryType accessoryType, nint titleNumberOfLines, nint subtitleNumberOfLines, nint footerNumberOfLines, nfloat containerWidth, bool isInSelectionMode);

		// +(CGFloat)preferredWidthWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle footer:(NSString * _Nonnull)footer customViewSize:(enum MSTableViewCellCustomViewSize)customViewSize customAccessoryView:(UIView * _Nullable)customAccessoryView accessoryType:(enum MSTableViewCellAccessoryType)accessoryType isInSelectionMode:(BOOL)isInSelectionMode __attribute__((warn_unused_result));
		[Static]
		[Export ("preferredWidthWithTitle:subtitle:footer:customViewSize:customAccessoryView:accessoryType:isInSelectionMode:")]
		nfloat GetPreferredWidth (string title, string subtitle, string footer, MSTableViewCellCustomViewSize customViewSize, [NullAllowed] UIView customAccessoryView, MSTableViewCellAccessoryType accessoryType, bool isInSelectionMode);

		[Export ("titleNumberOfLines")]
		nint TitleNumberOfLines { get; set; }

		[Export ("subtitleNumberOfLines")]
		nint SubtitleNumberOfLines { get; set; }

		[Export ("footerNumberOfLines")]
		nint FooterNumberOfLines { get; set; }

		[Export ("titleLineBreakMode", ArgumentSemantic.Assign)]
		UILineBreakMode TitleLineBreakMode { get; set; }

		[Export ("subtitleLineBreakMode", ArgumentSemantic.Assign)]
		UILineBreakMode SubtitleLineBreakMode { get; set; }

		[Export ("footerLineBreakMode", ArgumentSemantic.Assign)]
		UILineBreakMode FooterLineBreakMode { get; set; }

		// @property (readonly, nonatomic) enum MSTableViewCellCustomViewSize customViewSize;
		[Export ("customViewSize")]
		MSTableViewCellCustomViewSize CustomViewSize { get; }

		// @property (nonatomic) BOOL isInSelectionMode;
		[Export ("isInSelectionMode")]
		bool IsInSelectionMode { get; set; }

		// @property (nonatomic) BOOL showsSeparator;
		[Export ("showsSeparator")]
		bool ShowsSeparator { get; set; }

		[NullAllowed]
		[Export ("onAccessoryTapped", ArgumentSemantic.Copy)]
		Action OnAccessoryTapped { get; set; }

		[NullAllowed]
		[Export ("onSelected", ArgumentSemantic.Copy)]
		Action OnSelected { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(void) onUnselected;
		[NullAllowed]
		[Export ("onUnselected", ArgumentSemantic.Copy)]
		Action OnUnselected { get; set; }

		[DesignatedInitializer]
		[Export ("initWithStyle:reuseIdentifier:")]
		IntPtr Constructor (UITableViewCellStyle style, [NullAllowed] string reuseIdentifier);

		[Export ("setupWithTitle:subtitle:footer:customView:customAccessoryView:accessoryType:")]
		void Setup (string title, string subtitle, string footer, [NullAllowed] UIView customView, [NullAllowed] UIView customAccessoryView, MSTableViewCellAccessoryType accessoryType);

		// -(void)setIsInSelectionMode:(BOOL)isInSelectionMode animated:(BOOL)animated;
		[Export ("setIsInSelectionMode:animated:")]
		void SetIsInSelectionMode (bool isInSelectionMode, bool animated);

		// -(void)layoutContentSubviews;
		[Export ("layoutContentSubviews")]
		void LayoutContentSubviews ();

		[Export ("touchesBegan:withEvent:")]
		void TouchesBegan (NSSet<UITouch> touches, [NullAllowed] UIEvent @event);

		[Wrap ("TouchesBegan (new NSSet (touches), @event)")]
		void TouchesBegan (UITouch [] touches, [NullAllowed] UIEvent @event);

		[Export ("touchesCancelled:withEvent:")]
		void TouchesCancelled (NSSet<UITouch> touches, [NullAllowed] UIEvent @event);

		[Wrap ("TouchesCancelled (new NSSet (touches), @event)")]
		void TouchesCancelled (UITouch [] touches, [NullAllowed] UIEvent @event);

		[Export ("touchesEnded:withEvent:")]
		void TouchesEnded (NSSet<UITouch> touches, [NullAllowed] UIEvent @event);

		[Wrap ("TouchesEnded (new NSSet (touches), @event)")]
		void TouchesEnded (UITouch [] touches, [NullAllowed] UIEvent @event);
	}

	// @interface MSBooleanCell : MSTableViewCell
	[BaseType (typeof (MSTableViewCell), Name = ApiDefConstants.MSBooleanCell)]
	interface MSBooleanCell {
		// @property (nonatomic) BOOL isOn;
		[Export ("isOn")]
		bool IsOn { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(void) onValueChanged;
		[NullAllowed]
		[Export ("onValueChanged", ArgumentSemantic.Copy)]
		Action OnValueChanged { get; set; }

		// -(void)setupWithTitle:(NSString * _Nonnull)title customView:(UIView * _Nullable)customView isOn:(BOOL)isOn;
		[Export ("setupWithTitle:customView:isOn:")]
		void Setup (string title, [NullAllowed] UIView customView, bool isOn);

		// -(instancetype _Nonnull)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithStyle:reuseIdentifier:")]
		IntPtr Constructor (UITableViewCellStyle style, [NullAllowed] string reuseIdentifier);
	}

	[BaseType (typeof (UIButton), Name = ApiDefConstants.MSButton)]
	interface MSButton {

		[Export ("style", ArgumentSemantic.Assign)]
		MSButtonStyle Style { get; set; }

		[DesignatedInitializer]
		[Export ("initWithStyle:")]
		IntPtr Constructor (MSButtonStyle style);

		// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);
	}

	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSCalendarConfiguration)]
	interface MSCalendarConfiguration {
		[Static]
		[Export ("default_", ArgumentSemantic.Strong)]
		MSCalendarConfiguration DefaultInstance { [Bind ("default")] get; }

		[Export ("firstWeekday")]
		nint FirstWeekday { get; set; }
	}

	[BaseType (typeof (UITableViewCell), Name = ApiDefConstants.MSCenteredLabelCell)]
	interface MSCenteredLabelCell {

		[DesignatedInitializer]
		[Export ("initWithStyle:reuseIdentifier:")]
		IntPtr Constructor (UITableViewCellStyle style, [NullAllowed] string reuseIdentifier);
	}

	// @interface MSCollectionViewCell : UICollectionViewCell
	[BaseType (typeof (UICollectionViewCell), Name = ApiDefConstants.MSCollectionViewCell)]
	interface MSCollectionViewCell {
		// @property (readonly, copy, nonatomic, class) NSString * _Nonnull identifier;
		[Static]
		[Export ("identifier")]
		string Identifier { get; }

		// @property (readonly, nonatomic, strong) MSTableViewCell * _Nonnull cellView;
		[Export ("cellView", ArgumentSemantic.Strong)]
		MSTableViewCell CellView { get; }

		// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);

		// -(UICollectionViewLayoutAttributes * _Nonnull)preferredLayoutAttributesFittingAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes __attribute__((warn_unused_result));
		[Export ("preferredLayoutAttributesFittingAttributes:")]
		UICollectionViewLayoutAttributes GetPreferredLayoutAttributesFittingAttributes (UICollectionViewLayoutAttributes layoutAttributes);
	}

	// @interface MSCollectionViewHeaderFooterView : UICollectionReusableView
	[BaseType (typeof (UICollectionReusableView), Name = ApiDefConstants.MSCollectionViewHeaderFooterView)]
	interface MSCollectionViewHeaderFooterView {
		// @property (readonly, copy, nonatomic, class) NSString * _Nonnull identifier;
		[Static]
		[Export ("identifier")]
		string Identifier { get; }

		// @property (readonly, nonatomic, strong) MSTableViewHeaderFooterView * _Nonnull headerFooterView;
		[Export ("headerFooterView", ArgumentSemantic.Strong)]
		MSTableViewHeaderFooterView HeaderFooterView { get; }

		// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);
	}

	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSColors)]
	interface MSColors {

		[Static]
		[Export ("primary", ArgumentSemantic.Strong)]
		UIColor Primary { get; set; }

		[Static]
		[Export ("lightPrimary", ArgumentSemantic.Strong)]
		UIColor LightPrimary { get; set; }

		// @property (nonatomic, strong, class) UIColor * _Nonnull extraLightPrimary;
		[Static]
		[Export ("extraLightPrimary", ArgumentSemantic.Strong)]
		UIColor ExtraLightPrimary { get; set; }

		[Static]
		[Export ("lightGray", ArgumentSemantic.Strong)]
		UIColor LightGray { get; set; }

		[Static]
		[Export ("gray", ArgumentSemantic.Strong)]
		UIColor Gray { get; set; }

		[Static]
		[Export ("darkGray", ArgumentSemantic.Strong)]
		UIColor DarkGray { get; set; }

		[Static]
		[Export ("backgroundLightGray", ArgumentSemantic.Strong)]
		UIColor BackgroundLightGray { get; set; }

		[Static]
		[Export ("backgroundGray", ArgumentSemantic.Strong)]
		UIColor BackgroundGray { get; set; }

		[Static]
		[Export ("borderLightGray", ArgumentSemantic.Strong)]
		UIColor BorderLightGray { get; set; }

		[Static]
		[Export ("borderGray", ArgumentSemantic.Strong)]
		UIColor BorderGray { get; set; }

		[Static]
		[Export ("white", ArgumentSemantic.Strong)]
		UIColor White { get; set; }

		[Static]
		[Export ("black", ArgumentSemantic.Strong)]
		UIColor Black { get; set; }

		[Static]
		[Export ("error", ArgumentSemantic.Strong)]
		UIColor Error { get; set; }

		[Static]
		[Export ("lightError", ArgumentSemantic.Strong)]
		UIColor LightError { get; set; }

		[Static]
		[Export ("warning", ArgumentSemantic.Strong)]
		UIColor Warning { get; set; }

		[Static]
		[Export ("lightWarning", ArgumentSemantic.Strong)]
		UIColor LightWarning { get; set; }

		[Static]
		[Export ("avatarBackgroundColors", ArgumentSemantic.Copy)]
		UIColor [] AvatarBackgroundColors { get; set; }

		[Static]
		[Export ("background", ArgumentSemantic.Strong)]
		UIColor Background { get; set; }

		[Static]
		[Export ("disabled", ArgumentSemantic.Strong)]
		UIColor Disabled { get; set; }

		[Static]
		[Export ("foregroundRegular", ArgumentSemantic.Strong)]
		UIColor ForegroundRegular { get; set; }

		[Static]
		[Export ("foregroundSecondary", ArgumentSemantic.Strong)]
		UIColor ForegroundSecondary { get; set; }

		// @property (nonatomic, strong, class) UIColor * _Nonnull selected;
		[Static]
		[Export ("selected", ArgumentSemantic.Strong)]
		UIColor Selected { get; set; }

		[Static]
		[Export ("activityIndicator", ArgumentSemantic.Strong)]
		UIColor ActivityIndicator { get; set; }

		[Static]
		[Export ("centeredLabelText", ArgumentSemantic.Strong)]
		UIColor CenteredLabelText { get; set; }

		[Static]
		[Export ("separator", ArgumentSemantic.Strong)]
		UIColor Separator { get; set; }

		// @property (nonatomic, strong, class) UIColor * _Nonnull switchOnTint;
		[Static]
		[Export ("switchOnTint", ArgumentSemantic.Strong)]
		UIColor SwitchOnTint { get; set; }
	}

	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSDateTimePicker)]
	interface MSDateTimePicker {

		[NullAllowed]
		[Wrap ("WeakDelegate")]
		IMSDateTimePickerDelegate Delegate { get; set; }

		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		// -(void)presentFrom:(UIViewController * _Nonnull)presentingController with:(enum MSDateTimePickerMode)mode startDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nullable)endDate dateRangePresentation:(enum MSDateTimePickerDateRangePresentation)dateRangePresentation titles:(MSDateTimePickerTitles * _Nullable)titles;
		[Export ("presentFrom:with:startDate:endDate:dateRangePresentation:titles:")]
		void Present (UIViewController presentingController, MSDateTimePickerMode mode, NSDate startDate, [NullAllowed] NSDate endDate, MSDateTimePickerDateRangePresentation dateRangePresentation, [NullAllowed] MSDateTimePickerTitles titles);

		[Export ("dismiss")]
		void Dismiss ();
	}

	// @interface MSDateTimePickerTitles : NSObject
	[BaseType (typeof (NSObject))]
	interface MSDateTimePickerTitles { }

	interface IMSDateTimePickerDelegate { }

	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSDateTimePickerDelegate)]
	interface MSDateTimePickerDelegate {

		[Abstract]
		[Export ("dateTimePicker:didPickStartDate:endDate:")]
		void DidPickDate (MSDateTimePicker dateTimePicker, NSDate startDate, NSDate endDate);

		[Export ("dateTimePicker:shouldEndPickingStartDate:endDate:")]
		bool ShouldEndPickingDate (MSDateTimePicker dateTimePicker, NSDate startDate, NSDate endDate);
	}

	// @interface MSDimmingView : UIView
	[BaseType (typeof (UIView), Name = ApiDefConstants.MSDimmingView)]
	interface MSDimmingView {
		// -(instancetype _Nonnull)initWithType:(enum MSDimmingViewType)type __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithType:")]
		IntPtr Constructor (MSDimmingViewType type);
	}

	[BaseType (typeof (UIView), Name = ApiDefConstants.MSDotView)]
	interface MSDotView {

		[NullAllowed]
		[Export ("color", ArgumentSemantic.Strong)]
		UIColor Color { get; set; }

		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);

		[Export ("drawRect:")]
		void DrawRect (CGRect rect);
	}

	[BaseType (typeof (UIViewController), Name = ApiDefConstants.MSDrawerController)]
	interface MSDrawerController : IUIPopoverPresentationControllerDelegate, IUIViewControllerTransitioningDelegate {

		[NullAllowed]
		[Export ("contentController", ArgumentSemantic.Strong)]
		UIViewController ContentController { get; set; }

		[NullAllowed]
		[Export ("contentView", ArgumentSemantic.Strong)]
		UIView ContentView { get; set; }

		// @property (nonatomic) enum MSDrawerPresentationStyle presentationStyle;
		[Export ("presentationStyle", ArgumentSemantic.Assign)]
		MSDrawerPresentationStyle PresentationStyle { get; set; }

		// @property (nonatomic) CGFloat presentationOffset;
		[Export ("presentationOffset")]
		nfloat PresentationOffset { get; set; }

		// @property (nonatomic) enum MSDrawerPresentationBackground presentationBackground;
		[Export ("presentationBackground", ArgumentSemantic.Assign)]
		MSDrawerPresentationBackground PresentationBackground { get; set; }

		[Export ("resizingBehavior", ArgumentSemantic.Assign)]
		MSDrawerResizingBehavior ResizingBehavior { get; set; }

		[Export ("isExpanded")]
		bool IsExpanded { get; set; }

		[Export ("permittedArrowDirections", ArgumentSemantic.Assign)]
		UIPopoverArrowDirection PermittedArrowDirections { get; set; }

		[NullAllowed]
		[Export ("onDismiss", ArgumentSemantic.Copy)]
		Action OnDismiss { get; set; }

		[NullAllowed]
		[Export ("onDismissCompleted", ArgumentSemantic.Copy)]
		Action OnDismissCompleted { get; set; }

		[NullAllowed]
		[Wrap ("WeakDelegate")]
		IMSDrawerControllerDelegate Delegate { get; set; }

		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[DesignatedInitializer]
		[Export ("initWithSourceView:sourceRect:presentationOrigin:presentationDirection:")]
		IntPtr Constructor (UIView sourceView, CGRect sourceRect, nfloat presentationOrigin, MSDrawerPresentationDirection presentationDirection);

		[DesignatedInitializer]
		[Export ("initWithBarButtonItem:presentationOrigin:presentationDirection:")]
		IntPtr Constructor (UIBarButtonItem barButtonItem, nfloat presentationOrigin, MSDrawerPresentationDirection presentationDirection);
	}

	interface IMSDrawerControllerDelegate { }

	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSDrawerControllerDelegate)]
	interface MSDrawerControllerDelegate {

		[Export ("drawerControllerDidChangeExpandedState:")]
		void DidChangeExpandedState (MSDrawerController controller);

		[Export ("drawerControllerWillDismiss:")]
		void WillDismiss (MSDrawerController controller);

		[Export ("drawerControllerDidDismiss:")]
		void DidDismiss (MSDrawerController controller);
	}

	[BaseType (typeof (UIButton), Name = ApiDefConstants.MSEasyTapButton)]
	interface MSEasyTapButton {

		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);
	}

	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSFonts)]
	interface MSFonts {
		// @property (readonly, nonatomic, strong, class) UIFont * _Nonnull largeTitle;
		[Static]
		[Export ("largeTitle", ArgumentSemantic.Strong)]
		UIFont LargeTitle { get; }

		[Static]
		[Export ("title1", ArgumentSemantic.Strong)]
		UIFont Title1 { get; }

		[Static]
		[Export ("title2", ArgumentSemantic.Strong)]
		UIFont Title2 { get; }

		[Static]
		[Export ("headline", ArgumentSemantic.Strong)]
		UIFont Headline { get; }

		// @property (readonly, nonatomic, strong, class) UIFont * _Nonnull headlineUnscaled;
		[Static]
		[Export ("headlineUnscaled", ArgumentSemantic.Strong)]
		UIFont HeadlineUnscaled { get; }

		[Static]
		[Export ("body", ArgumentSemantic.Strong)]
		UIFont Body { get; }

		// @property (readonly, nonatomic, strong, class) UIFont * _Nonnull bodyUnscaled;
		[Static]
		[Export ("bodyUnscaled", ArgumentSemantic.Strong)]
		UIFont BodyUnscaled { get; }

		[Static]
		[Export ("subhead", ArgumentSemantic.Strong)]
		UIFont Subhead { get; }

		[Static]
		[Export ("footnote", ArgumentSemantic.Strong)]
		UIFont Footnote { get; }

		// @property (readonly, nonatomic, strong, class) UIFont * _Nonnull footnoteUnscaled;
		[Static]
		[Export ("footnoteUnscaled", ArgumentSemantic.Strong)]
		UIFont FootnoteUnscaled { get; }

		// @property (readonly, nonatomic, strong, class) UIFont * _Nonnull button1;
		[Static]
		[Export ("button1", ArgumentSemantic.Strong)]
		UIFont Button1 { get; }

		// @property (readonly, nonatomic, strong, class) UIFont * _Nonnull button2;
		[Static]
		[Export ("button2", ArgumentSemantic.Strong)]
		UIFont Button2 { get; }

		// @property (readonly, nonatomic, strong, class) UIFont * _Nonnull button3;
		[Static]
		[Export ("button3", ArgumentSemantic.Strong)]
		UIFont Button3 { get; }

		[Static]
		[Export ("caption1", ArgumentSemantic.Strong)]
		UIFont Caption1 { get; }

		[Static]
		[Export ("caption2", ArgumentSemantic.Strong)]
		UIFont Caption2 { get; }
	}

	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSHud)]
	interface MSHud {

		[Static]
		[Export ("shared", ArgumentSemantic.Strong)]
		MSHud SharedInstance { get; }

		[NullAllowed]
		[Wrap ("WeakDelegate")]
		IMSHudDelegate Delegate { get; set; }

		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[Export ("showIn:")]
		void Show (UIView view);

		[Export ("showIn:with:")]
		void Show (UIView view, MSHudParams parameters);

		[Export ("showFrom:")]
		void Show (UIViewController controller);

		[Export ("showFrom:with:")]
		void Show (UIViewController controller, MSHudParams parameters);

		[Export ("showSuccessIn:with:")]
		void ShowSuccess (UIView view, string caption);

		[Export ("showSuccessFrom:with:")]
		void ShowSuccess (UIViewController controller, string caption);

		[Export ("showFailureIn:with:")]
		void ShowFailure (UIView view, string caption);

		[Export ("showFailureFrom:with:")]
		void ShowFailure (UIViewController controller, string caption);

		[Export ("hideAnimated:")]
		void Hide (bool animated);
	}

	interface IMSHudDelegate { }

	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSHudDelegate)]
	interface MSHudDelegate {

		[Abstract]
		[return: NullAllowed]
		[Export ("defaultWindowForHUD:")]
		UIWindow GetDefaultWindow (MSHud hud);
	}

	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSHudParams)]
	interface MSHudParams {

		[Export ("caption")]
		string Caption { get; set; }

		[NullAllowed]
		[Export ("image", ArgumentSemantic.Strong)]
		UIImage Image { get; set; }

		[Export ("isBlocking")]
		bool IsBlocking { get; set; }

		[Export ("isPersistent")]
		bool IsPersistent { get; set; }

		[Export ("initWithCaption:image:isPersistent:isBlocking:")]
		IntPtr Constructor (string caption, [NullAllowed] UIImage image, bool isPersistent, bool isBlocking);
	}

	[BaseType (typeof (UILabel), Name = ApiDefConstants.MSLabel)]
	interface MSLabel {

		[Export ("colorStyle", ArgumentSemantic.Assign)]
		MSTextColorStyle ColorStyle { get; set; }

		[Export ("style", ArgumentSemantic.Assign)]
		MSTextStyle Style { get; set; }

		// @property (nonatomic) CGFloat maxFontSize;
		[Export ("maxFontSize")]
		nfloat MaxFontSize { get; set; }

		[DesignatedInitializer]
		[Export ("initWithStyle:colorStyle:")]
		IntPtr Constructor (MSTextStyle style, MSTextColorStyle colorStyle);
	}

	[BaseType (typeof (UIViewController), Name = ApiDefConstants.MSPageCardPresenterController)]
	interface MSPageCardPresenterController : IUIScrollViewDelegate, IUIViewControllerTransitioningDelegate { }

	interface IMSPersona { }

	[Protocol (Name = ApiDefConstants.MSPersona)]
	interface MSPersona {

		[Abstract]
		[NullAllowed]
		[Export ("avatarImage", ArgumentSemantic.Strong)]
		UIImage AvatarImage { get; }

		[Abstract]
		[Export ("email")]
		string Email { get; }

		[Abstract]
		[Export ("name")]
		string Name { get; }

		[Abstract]
		[Export ("subtitle")]
		string Subtitle { get; }
	}

	[BaseType (typeof (MSTableViewCell), Name = ApiDefConstants.MSPersonaCell)]
	interface MSPersonaCell {

		[DesignatedInitializer]
		[Export ("initWithStyle:reuseIdentifier:")]
		IntPtr Constructor (UITableViewCellStyle style, [NullAllowed] string reuseIdentifier);
	}

	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSPersonaData)]
	interface MSPersonaData : MSPersona {

		[DesignatedInitializer]
		[Export ("initWithName:email:subtitle:avatarImage:")]
		IntPtr Constructor (string name, string email, string subtitle, [NullAllowed] UIImage avatarImage);
	}

	[BaseType (typeof (UITableView), Name = ApiDefConstants.MSPersonaListView)]
	interface MSPersonaListView : IUITableViewDelegate, IUITableViewDataSource {

		[Export ("personaList", ArgumentSemantic.Copy)]
		IMSPersona [] PersonaList { get; set; }

		[Export ("accessoryType", ArgumentSemantic.Assign)]
		MSTableViewCellAccessoryType AccessoryType { get; set; }

		[Export ("showsSearchDirectoryButton")]
		bool ShowsSearchDirectoryButton { get; set; }

		[Wrap ("WeakSearchDirectoryDelegate")]
		[NullAllowed]
		IMSPersonaListViewSearchDirectoryDelegate SearchDirectoryDelegate { get; set; }

		[NullAllowed]
		[Export ("searchDirectoryDelegate", ArgumentSemantic.Weak)]
		NSObject WeakSearchDirectoryDelegate { get; set; }

		[NullAllowed]
		[Export ("onPersonaSelected", ArgumentSemantic.Copy)]
		Action<IMSPersona> OnPersonaSelected { get; set; }

		[Export ("pickPersona")]
		void PickPersona ();

		[Export ("selectPersonaWithDirection:")]
		void SelectPersona (MSPersonaListViewSelectionDirection direction);
	}

	interface IMSPersonaListViewSearchDirectoryDelegate { }

	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSPersonaListViewSearchDirectoryDelegate)]
	interface MSPersonaListViewSearchDirectoryDelegate {

		[Abstract]
		[Export ("personaListSearchDirectory:completion:")]
		void SearchDirectoryCompletion (MSPersonaListView personaListView, Action<bool> completion);
	}

	[BaseType (typeof (MSDrawerController), Name = ApiDefConstants.MSPopupMenuController)]
	interface MSPopupMenuController : IUITableViewDataSource, IUITableViewDelegate {
		[NullAllowed]
		[Export ("headerItem", ArgumentSemantic.Strong)]
		MSPopupMenuItem HeaderItem { get; set; }

		[NullAllowed]
		[Export ("selectedItemIndexPath", ArgumentSemantic.Copy)]
		NSIndexPath SelectedItemIndexPath { get; set; }

		[Export ("addItems:")]
		void AddItems (MSPopupMenuItem [] items);

		[Export ("addSection:")]
		void AddSection (MSPopupMenuSection section);

		[Export ("addSections:")]
		void AddSections (MSPopupMenuSection [] sections);

		[DesignatedInitializer]
		[Export ("initWithSourceView:sourceRect:presentationOrigin:presentationDirection:")]
		IntPtr Constructor (UIView sourceView, CGRect sourceRect, nfloat presentationOrigin, MSDrawerPresentationDirection presentationDirection);

		[DesignatedInitializer]
		[Export ("initWithBarButtonItem:presentationOrigin:presentationDirection:")]
		IntPtr Constructor (UIBarButtonItem barButtonItem, nfloat presentationOrigin, MSDrawerPresentationDirection presentationDirection);
	}

	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSPopupMenuItem)]
	interface MSPopupMenuItem {

		[NullAllowed]
		[Export ("image", ArgumentSemantic.Strong)]
		UIImage Image { get; }

		[NullAllowed]
		[Export ("selectedImage", ArgumentSemantic.Strong)]
		UIImage SelectedImage { get; }

		// @property (readonly, nonatomic, strong) UIImage * _Nullable accessoryImage;
		[NullAllowed]
		[Export ("accessoryImage", ArgumentSemantic.Strong)]
		UIImage AccessoryImage { get; }

		[Export ("title")]
		string Title { get; }

		[NullAllowed]
		[Export ("subtitle")]
		string Subtitle { get; }

		// @property (readonly, nonatomic, strong) UIView * _Nullable accessoryView;
		[NullAllowed]
		[Export ("accessoryView", ArgumentSemantic.Strong)]
		UIView AccessoryView { get; }

		// @property (readonly, nonatomic) enum MSPopupMenuItemExecutionMode executionMode;
		[Export ("executionMode")]
		MSPopupMenuItemExecutionMode ExecutionMode { get; }

		[Export ("isEnabled")]
		bool IsEnabled { get; set; }

		[Export ("isSelected")]
		bool IsSelected { get; set; }

		[NullAllowed]
		[Export ("onSelected", ArgumentSemantic.Copy)]
		Action OnSelected { get; }

		// -(instancetype _Nonnull)initWithImage:(UIImage * _Nullable)image selectedImage:(UIImage * _Nullable)selectedImage accessoryImage:(UIImage * _Nullable)accessoryImage title:(NSString * _Nonnull)title subtitle:(NSString * _Nullable)subtitle accessoryView:(UIView * _Nullable)accessoryView isEnabled:(BOOL)isEnabled isSelected:(BOOL)isSelected executes:(enum MSPopupMenuItemExecutionMode)executionMode onSelected:(void (^ _Nullable)(void))onSelected __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithImage:selectedImage:accessoryImage:title:subtitle:accessoryView:isEnabled:isSelected:executes:onSelected:")]
		IntPtr Constructor ([NullAllowed] UIImage image, [NullAllowed] UIImage selectedImage, [NullAllowed] UIImage accessoryImage, string title, [NullAllowed] string subtitle, [NullAllowed] UIView accessoryView, bool isEnabled, bool isSelected, MSPopupMenuItemExecutionMode executionMode, [NullAllowed] Action onSelected);

		// -(instancetype _Nonnull)initWithImageName:(NSString * _Nonnull)imageName generateSelectedImage:(BOOL)generateSelectedImage title:(NSString * _Nonnull)title subtitle:(NSString * _Nullable)subtitle isEnabled:(BOOL)isEnabled isSelected:(BOOL)isSelected executes:(enum MSPopupMenuItemExecutionMode)executionMode onSelected:(void (^ _Nullable)(void))onSelected;
		[Export ("initWithImageName:generateSelectedImage:title:subtitle:isEnabled:isSelected:executes:onSelected:")]
		IntPtr Constructor (string imageName, bool generateSelectedImage, string title, [NullAllowed] string subtitle, bool isEnabled, bool isSelected, MSPopupMenuItemExecutionMode executionMode, [NullAllowed] Action onSelected);
	}

	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSPopupMenuSection)]
	interface MSPopupMenuSection {

		[NullAllowed]
		[Export ("title")]
		string Title { get; }

		[Export ("items", ArgumentSemantic.Copy)]
		MSPopupMenuItem [] Items { get; set; }

		[DesignatedInitializer]
		[Export ("initWithTitle:items:")]
		IntPtr Constructor ([NullAllowed] string title, MSPopupMenuItem [] items);
	}

	[BaseType (typeof (UIView), Name = ApiDefConstants.MSResizingHandleView)]
	interface MSResizingHandleView {
		// @property (readonly, nonatomic, class) CGFloat height;
		[Static]
		[Export ("height")]
		nfloat Height { get; }

		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);
	}

	[BaseType (typeof (UIControl), Name = ApiDefConstants.MSSegmentedControl)]
	interface MSSegmentedControl {

		[Export ("isAnimated")]
		bool IsAnimated { get; set; }

		[Export ("numberOfSegments")]
		nint NumberOfSegments { get; }

		[Export ("selectedSegmentIndex")]
		nint SelectedSegmentIndex { get; set; }

		[DesignatedInitializer]
		[Export ("initWithItems:")]
		IntPtr Constructor (string [] items);

		[Export ("insertSegmentWithTitle:at:")]
		void InsertSegment (string title, nint index);

		[Export ("removeSegmentAt:")]
		void RemoveSegment (nint index);

		[Export ("selectSegmentAt:animated:")]
		void SelectSegment (nint index, bool animated);
	}

	// @interface MSSeparator : UIView
	[BaseType (typeof (UIView), Name = ApiDefConstants.MSSeparator)]
	interface MSSeparator {

		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);
	}

	// @interface MSTableViewHeaderFooterView : UITableViewHeaderFooterView
	[BaseType (typeof (UITableViewHeaderFooterView), Name = ApiDefConstants.MSTableViewHeaderFooterView)]
	interface MSTableViewHeaderFooterView {
		// @property (readonly, copy, nonatomic, class) NSString * _Nonnull identifier;
		[Static]
		[Export ("identifier")]
		string Identifier { get; }

		// +(CGFloat)heightWithStyle:(enum MSTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title titleNumberOfLines:(NSInteger)titleNumberOfLines containerWidth:(CGFloat)containerWidth __attribute__((warn_unused_result));
		[Static]
		[Export ("heightWithStyle:title:titleNumberOfLines:containerWidth:")]
		nfloat GetHeight (MSTableViewHeaderFooterViewStyle style, string title, nint titleNumberOfLines, nfloat containerWidth);

		// +(CGFloat)preferredWidthWithStyle:(enum MSTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title accessoryButton:(UIButton * _Nullable)accessoryButton __attribute__((warn_unused_result));
		[Static]
		[Export ("preferredWidthWithStyle:title:accessoryButton:")]
		nfloat GetPreferredWidth (MSTableViewHeaderFooterViewStyle style, string title, [NullAllowed] UIButton accessoryButton);

		// @property (nonatomic) NSInteger titleNumberOfLines;
		[Export ("titleNumberOfLines")]
		nint TitleNumberOfLines { get; set; }

		// @property (copy, nonatomic) void (^ _Nullable)(void) onAccessoryButtonTapped;
		[NullAllowed]
		[Export ("onAccessoryButtonTapped", ArgumentSemantic.Copy)]
		Action OnAccessoryButtonTapped { get; set; }

		// -(instancetype _Nonnull)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier __attribute__((objc_designated_initializer));
		[DesignatedInitializer]
		[Export ("initWithReuseIdentifier:")]
		IntPtr Constructor ([NullAllowed] string reuseIdentifier);

		// -(void)setupWithStyle:(enum MSTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title accessoryButtonTitle:(NSString * _Nonnull)accessoryButtonTitle;
		[Export ("setupWithStyle:title:accessoryButtonTitle:")]
		void Setup (MSTableViewHeaderFooterViewStyle style, string title, string accessoryButtonTitle);
	}

	// @interface MSTooltip : NSObject
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSTooltip)]
	interface MSTooltip {
		// @property (readonly, nonatomic, class) UIEdgeInsets defaultScreenMargins;
		[Static]
		[Export ("defaultScreenMargins")]
		UIEdgeInsets DefaultScreenMargins { get; }

		// @property (readonly, nonatomic, strong, class) MSTooltip * _Nonnull shared;
		[Static]
		[Export ("shared", ArgumentSemantic.Strong)]
		MSTooltip Shared { get; }

		// @property (nonatomic) NSTextAlignment textAlignment;
		[Export ("textAlignment", ArgumentSemantic.Assign)]
		UITextAlignment TextAlignment { get; set; }

		// @property (readonly, nonatomic) BOOL isShowing;
		[Export ("isShowing")]
		bool IsShowing { get; }

		// -(void)showWith:(NSString * _Nonnull)message for:(UIView * _Nonnull)anchorView preferredArrowDirection:(enum ArrowDirection)preferredArrowDirection offset:(CGPoint)offset screenMargins:(UIEdgeInsets)screenMargins dismissOn:(enum DismissMode)dismissMode onTap:(void (^ _Nullable)(void))onTap;
		[Export ("showWith:for:preferredArrowDirection:offset:screenMargins:dismissOn:onTap:")]
		void Show (string message, UIView anchorView, MSArrowDirection preferredArrowDirection, CGPoint offset, UIEdgeInsets screenMargins, MSDismissMode dismissMode, [NullAllowed] Action onTap);

		// -(void)hide;
		[Export ("hide")]
		void Hide ();
	}

	[BaseType (typeof (UIView), Name = ApiDefConstants.MSTouchForwardingView)]
	interface MSTouchForwardingView {

		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);
	}

	[BaseType (typeof (UIView), Name = ApiDefConstants.MSTwoLineTitleView)]
	interface MSTwoLineTitleView {
		// @property (copy, nonatomic) NSString * _Nullable titleAccessibilityHint;
		[NullAllowed]
		[Export ("titleAccessibilityHint")]
		string TitleAccessibilityHint { get; set; }

		// @property (nonatomic) UIAccessibilityTraits titleAccessibilityTraits;
		[Export ("titleAccessibilityTraits")]
		ulong TitleAccessibilityTraits { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable subtitleAccessibilityHint;
		[NullAllowed]
		[Export ("subtitleAccessibilityHint")]
		string SubtitleAccessibilityHint { get; set; }

		// @property (nonatomic) UIAccessibilityTraits subtitleAccessibilityTraits;
		[Export ("subtitleAccessibilityTraits")]
		ulong SubtitleAccessibilityTraits { get; set; }

		[NullAllowed]
		[Wrap ("WeakDelegate")]
		IMSTwoLineTitleViewDelegate Delegate { get; set; }

		// @property (nonatomic, weak) id<MSTwoLineTitleViewDelegate> _Nullable delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[Export ("initWithStyle:")]
		IntPtr Constructor (MSTwoLineTitleViewStyle style);

		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);

		// -(void)setupWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nullable)subtitle interactivePart:(enum MSTwoLineTitleViewInteractivePart)interactivePart accessoryType:(enum MSTwoLineTitleViewAccessoryType)accessoryType;
		[Export ("setupWithTitle:subtitle:interactivePart:accessoryType:")]
		void Setup (string title, [NullAllowed] string subtitle, MSTwoLineTitleViewInteractivePart interactivePart, MSTwoLineTitleViewAccessoryType accessoryType);

		[Export ("accessibilityElementCount")]
		nint AccessibilityElementCount { get; }

		[return: NullAllowed]
		[Export ("accessibilityElementAtIndex:")]
		NSObject GetAccessibilityElement (nint index);

		[Export ("indexOfAccessibilityElement:")]
		nint GetIndexOfAccessibilityElement (NSObject element);
	}

	interface IMSTwoLineTitleViewDelegate { }

	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = ApiDefConstants.MSTwoLineTitleViewDelegate)]
	interface MSTwoLineTitleViewDelegate {
		// @required -(void)twoLineTitleViewDidTapOnTitle:(MSTwoLineTitleView * _Nonnull)twoLineTitleView;
		[Abstract]
		[Export ("twoLineTitleViewDidTapOnTitle:")]
		void DidTapOnTitle (MSTwoLineTitleView twoLineTitleView);
	}

	[BaseType (typeof (NSObject), Name = ApiDefConstants.OfficeUIFabricFramework)]
	interface OfficeUIFabricFramework { }

	// @interface OfficeUIFabric_Swift_1690 (UIImage)
	[Static]
	interface UIImageOfficeUIFabricExtension {
		// +(UIImage * _Nullable)staticImageNamed:(NSString * _Nonnull)name in:(NSBundle * _Nullable)bundle withPrimaryColorForDarkerSystemColors:(UIColor * _Nullable)darkerPrimaryColor __attribute__((warn_unused_result));
		[Static]
		[return: NullAllowed]
		[Export ("staticImageNamed:in:withPrimaryColorForDarkerSystemColors:")]
		UIImage StaticImageNamed (string name, [NullAllowed] NSBundle bundle, [NullAllowed] UIColor darkerPrimaryColor);
	}

	// @interface OfficeUIFabric_Swift_1700 (UINavigationBar)
	[Category]
	[BaseType (typeof (UINavigationBar))]
	interface UINavigationBar_OfficeUIFabric_Swift_1700 {
		// -(void)hideBottomBorder;
		[Export ("hideBottomBorder")]
		void HideBottomBorder ();
	}

	// @interface OfficeUIFabric_Swift_1709 (UIView)
	[Category]
	[BaseType (typeof (UIView))]
	interface UIView_OfficeUIFabric_Swift_1709 {
		// -(void)fitIntoSuperviewUsingConstraints:(BOOL)usingConstraints usingLeadingTrailing:(BOOL)usingLeadingTrailing margins:(UIEdgeInsets)margins autoWidth:(BOOL)autoWidth autoHeight:(BOOL)autoHeight;
		[Export ("fitIntoSuperviewUsingConstraints:usingLeadingTrailing:margins:autoWidth:autoHeight:")]
		void FitIntoSuperview (bool usingConstraints, bool usingLeadingTrailing, UIEdgeInsets margins, bool autoWidth, bool autoHeight);

		// -(void)fitIntoSuperview;
		[Export ("fitIntoSuperview")]
		void FitIntoSuperview ();
	}

	// @interface OfficeUIFabric_Swift_1715 (UIViewController)
	[Category]
	[BaseType (typeof (UIViewController))]
	interface UIViewController_OfficeUIFabric_Swift_1715 {
		// -(void)addChildController:(UIViewController * _Nonnull)childController;
		[Export ("addChildController:")]
		void AddChildController (UIViewController childController);

		// -(void)removeChildController:(UIViewController * _Nonnull)childController;
		[Export ("removeChildController:")]
		void RemoveChildController (UIViewController childController);
	}
}
